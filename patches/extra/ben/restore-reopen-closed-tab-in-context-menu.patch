--- a/chrome/browser/ui/browser_command_controller.cc
+++ b/chrome/browser/ui/browser_command_controller.cc
@@ -1552,8 +1552,9 @@ void BrowserCommandController::UpdateTab
   // The command is updated once the load completes.
   command_updater_.UpdateCommandEnabled(
       IDC_RESTORE_TAB,
-      tab_restore_service && (!tab_restore_service->IsLoaded() ||
-                              !tab_restore_service->entries().empty()));
+      tab_restore_service &&
+          (!tab_restore_service->IsLoaded() ||
+           GetRestoreTabType(browser_) != TabStripModelDelegate::RESTORE_NONE));
 }
 
 void BrowserCommandController::UpdateCommandsForFind() {
--- a/chrome/browser/ui/browser_commands.cc
+++ b/chrome/browser/ui/browser_commands.cc
@@ -735,6 +735,17 @@ bool CanResetZoom(content::WebContents* 
          !zoom_controller->PageScaleFactorIsOne();
 }
 
+TabStripModelDelegate::RestoreTabType GetRestoreTabType(
+    const Browser* browser) {
+  sessions::TabRestoreService* service =
+      TabRestoreServiceFactory::GetForProfile(browser->profile());
+  if (!service || service->entries().empty())
+    return TabStripModelDelegate::RESTORE_NONE;
+  if (service->entries().front()->type == sessions::TabRestoreService::WINDOW)
+    return TabStripModelDelegate::RESTORE_WINDOW;
+  return TabStripModelDelegate::RESTORE_TAB;
+}
+
 void SelectNextTab(Browser* browser,
                    TabStripModel::UserGestureDetails gesture_detail) {
   base::RecordAction(UserMetricsAction("SelectNextTab"));
--- a/chrome/browser/ui/browser_commands.h
+++ b/chrome/browser/ui/browser_commands.h
@@ -86,6 +86,7 @@ bool CanZoomIn(content::WebContents* con
 bool CanZoomOut(content::WebContents* contents);
 bool CanResetZoom(content::WebContents* contents);
 void RestoreTab(Browser* browser);
+TabStripModelDelegate::RestoreTabType GetRestoreTabType(const Browser* browser);
 void SelectNextTab(
     Browser* browser,
     TabStripModel::UserGestureDetails gesture_detail =
--- a/chrome/browser/ui/browser_tab_strip_model_delegate.cc
+++ b/chrome/browser/ui/browser_tab_strip_model_delegate.cc
@@ -225,6 +225,15 @@ bool BrowserTabStripModelDelegate::Shoul
   return browser_->ShouldRunUnloadListenerBeforeClosing(contents);
 }
 
+TabStripModelDelegate::RestoreTabType
+BrowserTabStripModelDelegate::GetRestoreTabType() {
+  return chrome::GetRestoreTabType(browser_);
+}
+
+void BrowserTabStripModelDelegate::RestoreTab() {
+  chrome::RestoreTab(browser_);
+}
+
 bool BrowserTabStripModelDelegate::ShouldDisplayFavicon(
     content::WebContents* contents) const {
   return browser_->ShouldDisplayFavicon(contents);
--- a/chrome/browser/ui/browser_tab_strip_model_delegate.h
+++ b/chrome/browser/ui/browser_tab_strip_model_delegate.h
@@ -49,6 +49,8 @@ class BrowserTabStripModelDelegate : pub
   bool RunUnloadListenerBeforeClosing(content::WebContents* contents) override;
   bool ShouldRunUnloadListenerBeforeClosing(
       content::WebContents* contents) override;
+  RestoreTabType GetRestoreTabType() override;
+  void RestoreTab() override;
   bool ShouldDisplayFavicon(content::WebContents* contents) const override;
 
   void CloseFrame();
--- a/chrome/browser/ui/tabs/tab_menu_model.cc
+++ b/chrome/browser/ui/tabs/tab_menu_model.cc
@@ -162,4 +162,10 @@ void TabMenuModel::Build(TabStripModel* 
                       IDS_TAB_CXMENU_CLOSEOTHERTABS);
   AddItemWithStringId(TabStripModel::CommandCloseTabsToRight,
                       IDS_TAB_CXMENU_CLOSETABSTORIGHT);
+  AddSeparator(ui::NORMAL_SEPARATOR);
+
+  const bool is_window = tab_strip->delegate()->GetRestoreTabType() ==
+      TabStripModelDelegate::RESTORE_WINDOW;
+  AddItemWithStringId(TabStripModel::CommandRestoreTab,
+                      is_window ? IDS_RESTORE_WINDOW : IDS_RESTORE_TAB);
 }
--- a/chrome/browser/ui/tabs/tab_strip_model.cc
+++ b/chrome/browser/ui/tabs/tab_strip_model.cc
@@ -1269,6 +1269,10 @@ bool TabStripModel::IsContextMenuCommand
       return false;
     }
 
+    case CommandRestoreTab:
+      return delegate()->GetRestoreTabType() !=
+             TabStripModelDelegate::RESTORE_NONE;
+
     case CommandToggleSiteMuted:
       return true;
 
@@ -1394,6 +1398,11 @@ void TabStripModel::ExecuteContextMenuCo
       break;
     }
 
+    case CommandRestoreTab: {
+      delegate()->RestoreTab();
+      break;
+    }
+
     case CommandSendTabToSelfSingleTarget: {
       send_tab_to_self::ShareToSingleTarget(GetWebContentsAt(context_index));
       send_tab_to_self::RecordSendTabToSelfClickResult(
@@ -1571,6 +1580,9 @@ bool TabStripModel::ContextMenuCommandTo
     case CommandCloseTab:
       *browser_cmd = IDC_CLOSE_TAB;
       break;
+    case CommandRestoreTab:
+      *browser_cmd = IDC_RESTORE_TAB;
+      break;
     case CommandFocusMode:
       *browser_cmd = IDC_FOCUS_THIS_TAB;
       break;
--- a/chrome/browser/ui/tabs/tab_strip_model.h
+++ b/chrome/browser/ui/tabs/tab_strip_model.h
@@ -498,6 +498,7 @@ class TabStripModel : public TabGroupCon
     CommandCloseTab,
     CommandCloseOtherTabs,
     CommandCloseTabsToRight,
+    CommandRestoreTab,
     CommandTogglePinned,
     CommandToggleGrouped,
     CommandFocusMode,
--- a/chrome/browser/ui/tabs/tab_strip_model_delegate.h
+++ b/chrome/browser/ui/tabs/tab_strip_model_delegate.h
@@ -46,6 +46,12 @@ class TabStripModelDelegate {
     TAB_TEAROFF_ACTION = 2
   };
 
+  enum RestoreTabType {
+    RESTORE_NONE,
+    RESTORE_TAB,
+    RESTORE_WINDOW
+  };
+
   virtual ~TabStripModelDelegate() {}
 
   // Adds a tab to the model and loads |url| in the tab. If |url| is an empty
@@ -141,6 +147,12 @@ class TabStripModelDelegate {
   virtual bool ShouldRunUnloadListenerBeforeClosing(
       content::WebContents* contents) = 0;
 
+  // Returns the current tab restore type.
+  virtual RestoreTabType GetRestoreTabType() = 0;
+
+  // Restores the last closed tab unless tab restore type is none.
+  virtual void RestoreTab() = 0;
+
   // Returns whether favicon should be shown.
   virtual bool ShouldDisplayFavicon(
       content::WebContents* web_contents) const = 0;
