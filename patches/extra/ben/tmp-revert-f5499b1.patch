--- a/content/browser/accessibility/accessibility_tree_formatter_utils_mac.h
+++ b/content/browser/accessibility/accessibility_tree_formatter_utils_mac.h
@@ -34,16 +34,10 @@ class CONTENT_EXPORT LineIndexer final {
     std::string DOMid;
   };
 
-  // IsBrowserAccessibilityCocoa or IsAXUIElement accessible nodes comparator.
-  struct NodeComparator {
-    constexpr bool operator()(const gfx::NativeViewAccessible& lhs,
-                              const gfx::NativeViewAccessible& rhs) const;
-  };
-
   // Map between accessible objects and their identificators which can be a line
   // index the object is placed at in an accessible tree or its DOM id
   // attribute.
-  std::map<const gfx::NativeViewAccessible, NodeIdentifier, NodeComparator> map;
+  std::map<const gfx::NativeViewAccessible, NodeIdentifier> map;
 };
 
 // Implements stateful id values. Can be either id or be in
--- a/content/browser/accessibility/accessibility_tree_formatter_utils_mac.mm
+++ b/content/browser/accessibility/accessibility_tree_formatter_utils_mac.mm
@@ -55,23 +55,20 @@ LineIndexer::LineIndexer(const gfx::Nati
 
 LineIndexer::~LineIndexer() {}
 
-constexpr bool LineIndexer::NodeComparator::operator()(
-    const gfx::NativeViewAccessible& lhs,
-    const gfx::NativeViewAccessible& rhs) const {
-  if (IsAXUIElement(lhs)) {
-    DCHECK(IsAXUIElement(rhs));
-    return CFHash(lhs) < CFHash(rhs);
-  }
-  DCHECK(IsBrowserAccessibilityCocoa(lhs));
-  DCHECK(IsBrowserAccessibilityCocoa(rhs));
-  return lhs < rhs;
-}
-
 std::string LineIndexer::IndexBy(const gfx::NativeViewAccessible node) const {
   std::string line_index = ":unknown";
-  auto iter = map.find(node);
-  if (iter != map.end()) {
-    line_index = iter->second.line_index;
+  if (IsBrowserAccessibilityCocoa(node)) {
+    auto iter = map.find(node);
+    if (iter != map.end()) {
+      line_index = iter->second.line_index;
+    }
+  } else if (IsAXUIElement(node)) {
+    for (auto& iter : map) {
+      if (CFEqual(iter.first, node)) {
+        line_index = iter.second.line_index;
+        break;
+      }
+    }
   }
   return line_index;
 }
