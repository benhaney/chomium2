--- a/chrome/browser/federated_learning/floc_eligibility_observer.cc
+++ b/chrome/browser/federated_learning/floc_eligibility_observer.cc
@@ -18,15 +18,7 @@ namespace federated_learning {
 namespace {
 
 history::HistoryService* GetHistoryService(content::WebContents* web_contents) {
-  DCHECK(web_contents);
-
-  Profile* profile =
-      Profile::FromBrowserContext(web_contents->GetBrowserContext());
-  if (profile->IsOffTheRecord())
-    return nullptr;
-
-  return HistoryServiceFactory::GetForProfile(
-      profile, ServiceAccessType::IMPLICIT_ACCESS);
+  return nullptr;
 }
 
 }  // namespace
@@ -36,32 +28,7 @@ FlocEligibilityObserver::~FlocEligibilit
 page_load_metrics::PageLoadMetricsObserver::ObservePolicy
 FlocEligibilityObserver::OnCommit(
     content::NavigationHandle* navigation_handle) {
-  // At this point the add-page-to-history decision should have been made,
-  // because history is added in HistoryTabHelper::DidFinishNavigation, and this
-  // OnEligibleCommit method is invoked in the same broadcasting family through
-  // MetricsWebContentsObserver::DidFinishNavigation.
-
-  // TODO(yaoxia): Perhaps we want an explicit signal for "the page was added
-  // to history or was ineligible". This way we don't need to count on the above
-  // relation, and can also stop observing if the history was not added.
-
-  // If the IP was not publicly routable, the navigation history is not eligible
-  // for floc. We can stop observing now.
-  if (!navigation_handle->GetSocketAddress().address().IsPubliclyRoutable())
-    return ObservePolicy::STOP_OBSERVING;
-
-  // If the interest-cohort permissions policy in the main document disallows
-  // the floc inclusion, the navigation history is not eligible for floc. We can
-  // stop observing now.
-  if (!navigation_handle->GetRenderFrameHost()->IsFeatureEnabled(
-          blink::mojom::PermissionsPolicyFeature::kInterestCohort)) {
-    return ObservePolicy::STOP_OBSERVING;
-  }
-
-  DCHECK(!eligible_commit_);
-  eligible_commit_ = true;
-
-  return ObservePolicy::CONTINUE_OBSERVING;
+  return ObservePolicy::STOP_OBSERVING;
 }
 
 void FlocEligibilityObserver::OnAdResource() {
@@ -76,17 +43,7 @@ FlocEligibilityObserver::FlocEligibility
     : web_contents_(content::WebContents::FromRenderFrameHost(rfh)) {}
 
 void FlocEligibilityObserver::OnOptInSignalObserved() {
-  if (!eligible_commit_ || observed_opt_in_signal_)
-    return;
-
-  if (history::HistoryService* hs = GetHistoryService(web_contents_)) {
-    hs->SetFlocAllowed(
-        history::ContextIDForWebContents(web_contents_),
-        web_contents_->GetController().GetLastCommittedEntry()->GetUniqueID(),
-        web_contents_->GetLastCommittedURL());
-  }
-
-  observed_opt_in_signal_ = true;
+  return;
 }
 
 RENDER_DOCUMENT_HOST_USER_DATA_KEY_IMPL(FlocEligibilityObserver)
--- a/chrome/browser/federated_learning/floc_id_provider_factory.cc
+++ b/chrome/browser/federated_learning/floc_id_provider_factory.cc
@@ -48,39 +48,7 @@ FlocIdProviderFactory::~FlocIdProviderFa
 
 KeyedService* FlocIdProviderFactory::BuildServiceInstanceFor(
     content::BrowserContext* context) const {
-  Profile* profile = Profile::FromBrowserContext(context);
-
-  syncer::SyncService* sync_service =
-      ProfileSyncServiceFactory::GetForProfile(profile);
-  if (!sync_service)
-    return nullptr;
-
-  PrivacySandboxSettings* privacy_sandbox_settings =
-      PrivacySandboxSettingsFactory::GetForProfile(profile);
-  if (!privacy_sandbox_settings)
-    return nullptr;
-
-  FlocRemotePermissionService* floc_remote_permission_service =
-      FlocRemotePermissionServiceFactory::GetForProfile(profile);
-  if (!floc_remote_permission_service)
-    return nullptr;
-
-  history::HistoryService* history_service =
-      HistoryServiceFactory::GetForProfile(profile,
-                                           ServiceAccessType::IMPLICIT_ACCESS);
-  if (!history_service)
-    return nullptr;
-
-  syncer::UserEventService* user_event_service =
-      browser_sync::UserEventServiceFactory::GetForProfile(profile);
-  if (!user_event_service)
-    return nullptr;
-
-  auto floc_event_logger = std::make_unique<FlocEventLogger>(
-      sync_service, floc_remote_permission_service, user_event_service);
-
-  return new FlocIdProviderImpl(profile->GetPrefs(), privacy_sandbox_settings,
-                                history_service, std::move(floc_event_logger));
+  return nullptr;
 }
 
 }  // namespace federated_learning
--- a/chrome/browser/federated_learning/floc_id_provider_impl.cc
+++ b/chrome/browser/federated_learning/floc_id_provider_impl.cc
@@ -148,155 +148,47 @@ blink::mojom::InterestCohortPtr FlocIdPr
 }
 
 void FlocIdProviderImpl::MaybeRecordFlocToUkm(ukm::SourceId source_id) {
-  if (!need_ukm_recording_)
-    return;
-
-  auto* ukm_recorder = ukm::UkmRecorder::Get();
-  ukm::builders::FlocPageLoad builder(source_id);
-
-  if (floc_id_.IsValid())
-    builder.SetFlocId(floc_id_.ToUint64());
-
-  builder.Record(ukm_recorder->Get());
-
-  need_ukm_recording_ = false;
+  return;
 }
 
 void FlocIdProviderImpl::OnComputeFlocCompleted(ComputeFlocResult result) {
-  DCHECK(floc_computation_in_progress_);
-  floc_computation_in_progress_ = false;
-
-  // History-delete event came in when this computation was in progress. Ignore
-  // this computation completely and recompute.
-  if (need_recompute_) {
-    need_recompute_ = false;
-    ComputeFloc();
-    return;
-  }
-
-  LogFlocComputedEvent(result);
-
-  floc_id_ = result.floc_id;
-  floc_id_.SaveToPrefs(prefs_);
-
-  need_ukm_recording_ = true;
-
-  ScheduleFlocComputation(kFlocIdScheduledUpdateInterval.Get());
+  return;
 }
 
 void FlocIdProviderImpl::LogFlocComputedEvent(const ComputeFlocResult& result) {
-  floc_event_logger_->LogFlocComputedEvent(
-      FlocEventLogger::Event{result.sim_hash_computed, result.sim_hash,
-                             result.floc_id.compute_time()});
+  return;
 }
 
 void FlocIdProviderImpl::Shutdown() {
-  privacy_sandbox_settings_->RemoveObserver(this);
-  history_service_observation_.Reset();
-  g_browser_process->floc_sorting_lsh_clusters_service()->RemoveObserver(this);
+  return;
 }
 
 void FlocIdProviderImpl::OnFlocDataAccessibleSinceUpdated() {
-  // Set the |need_recompute_| flag so that we will recompute the floc
-  // immediately after the in-progress one finishes, so as to avoid potential
-  // data races.
-  if (floc_computation_in_progress_) {
-    need_recompute_ = true;
-    return;
-  }
-
-  // Note: we only invalidate the floc rather than recomputing, because we don't
-  // want the floc to change more frequently than the scheduled update rate.
-
-  // No-op if the floc is already invalid.
-  if (!floc_id_.IsValid())
-    return;
-
-  // Invalidate the floc if the new floc-accessible-since time is greater than
-  // the begin time of the history used to compute the current floc.
-  if (privacy_sandbox_settings_->FlocDataAccessibleSince() >
-      floc_id_.history_begin_time()) {
-    floc_id_.InvalidateIdAndSaveToPrefs(prefs_);
-  }
+  return;
 }
 
 void FlocIdProviderImpl::OnURLsDeleted(
     history::HistoryService* history_service,
     const history::DeletionInfo& deletion_info) {
-  // Set the |need_recompute_| flag so that we will recompute the floc
-  // immediately after the in-progress one finishes, so as to avoid potential
-  // data races.
-  if (floc_computation_in_progress_) {
-    need_recompute_ = true;
-    return;
-  }
-
-  if (!floc_id_.IsValid())
-    return;
-
-  // Only invalidate the floc if it's delete-all or if the time range overlaps
-  // with the time range of the history used to compute the current floc.
-  if (!deletion_info.IsAllHistory() && !deletion_info.time_range().IsValid()) {
-    return;
-  }
-
-  if (deletion_info.time_range().begin() > floc_id_.history_end_time() ||
-      deletion_info.time_range().end() < floc_id_.history_begin_time()) {
-    return;
-  }
-
-  // We log the invalidation event although it's technically not a recompute.
-  // It'd give us a better idea how often the floc is invalidated due to
-  // history-delete.
-  LogFlocComputedEvent(ComputeFlocResult());
-
-  floc_id_.InvalidateIdAndSaveToPrefs(prefs_);
+  return;
 }
 
 void FlocIdProviderImpl::OnSortingLshClustersFileReady() {
-  // If the floc computation is happening now or is scheduled, no-op; otherwise,
-  // we want to trigger a computation as soon as the sorting-lsh file is loaded.
-  if (floc_computation_in_progress_ || compute_floc_timer_.IsRunning())
-    return;
-
-  ComputeFloc();
+  return;
 }
 
 void FlocIdProviderImpl::ComputeFloc() {
-  DCHECK(!floc_computation_in_progress_);
-
-  floc_computation_in_progress_ = true;
-
-  auto compute_floc_completed_callback =
-      base::BindOnce(&FlocIdProviderImpl::OnComputeFlocCompleted,
-                     weak_ptr_factory_.GetWeakPtr());
-
-  CheckCanComputeFloc(
-      base::BindOnce(&FlocIdProviderImpl::OnCheckCanComputeFlocCompleted,
-                     weak_ptr_factory_.GetWeakPtr(),
-                     std::move(compute_floc_completed_callback)));
+  return;
 }
 
 void FlocIdProviderImpl::CheckCanComputeFloc(CanComputeFlocCallback callback) {
-  if (!IsPrivacySandboxAllowed()) {
-    std::move(callback).Run(false);
-    return;
-  }
-
-  std::move(callback).Run(true);
+  return;
 }
 
 void FlocIdProviderImpl::OnCheckCanComputeFlocCompleted(
     ComputeFlocCompletedCallback callback,
     bool can_compute_floc) {
-  if (!can_compute_floc) {
-    std::move(callback).Run(ComputeFlocResult());
-    return;
-  }
-
-  GetRecentlyVisitedURLs(
-      base::BindOnce(&FlocIdProviderImpl::OnGetRecentlyVisitedURLsCompleted,
-                     weak_ptr_factory_.GetWeakPtr(), std::move(callback)));
+  return;
 }
 
 bool FlocIdProviderImpl::IsPrivacySandboxAllowed() const {
@@ -305,60 +197,11 @@ bool FlocIdProviderImpl::IsPrivacySandbo
 
 void FlocIdProviderImpl::GetRecentlyVisitedURLs(
     GetRecentlyVisitedURLsCallback callback) {
-  base::Time now = base::Time::Now();
-
-  history::QueryOptions options;
-  options.begin_time =
-      std::max(privacy_sandbox_settings_->FlocDataAccessibleSince(),
-               now - base::TimeDelta::FromDays(kQueryHistoryWindowInDays));
-  options.end_time = now;
-  options.duplicate_policy = history::QueryOptions::KEEP_ALL_DUPLICATES;
-
-  history_service_->QueryHistory(std::u16string(), options, std::move(callback),
-                                 &history_task_tracker_);
 }
 
 void FlocIdProviderImpl::OnGetRecentlyVisitedURLsCompleted(
     ComputeFlocCompletedCallback callback,
     history::QueryResults results) {
-  std::unordered_set<std::string> domains;
-
-  base::Time history_begin_time = base::Time::Max();
-  base::Time history_end_time = base::Time::Min();
-
-  for (const history::URLResult& url_result : results) {
-    if (!(url_result.content_annotations().annotation_flags &
-          history::VisitContentAnnotationFlag::kFlocEligibleRelaxed)) {
-      continue;
-    }
-
-    if (url_result.visit_time() < history_begin_time)
-      history_begin_time = url_result.visit_time();
-
-    if (url_result.visit_time() > history_end_time)
-      history_end_time = url_result.visit_time();
-
-    domains.insert(net::registry_controlled_domains::GetDomainAndRegistry(
-        url_result.url(),
-        net::registry_controlled_domains::INCLUDE_PRIVATE_REGISTRIES));
-  }
-
-  if (domains.size() <
-      static_cast<size_t>(kFlocIdMinimumHistoryDomainSizeRequired.Get())) {
-    std::move(callback).Run(ComputeFlocResult());
-    return;
-  }
-
-  uint64_t sim_hash = FlocId::SimHashHistory(domains);
-
-  // Apply the sorting-lsh post processing to compute the final versioned floc.
-  // The final floc may be invalid if the file is corrupted or the floc is in
-  // the block list.
-  g_browser_process->floc_sorting_lsh_clusters_service()->ApplySortingLsh(
-      sim_hash,
-      base::BindOnce(&FlocIdProviderImpl::DidApplySortingLshPostProcessing,
-                     weak_ptr_factory_.GetWeakPtr(), std::move(callback),
-                     sim_hash, history_begin_time, history_end_time));
 }
 
 void FlocIdProviderImpl::DidApplySortingLshPostProcessing(
@@ -368,20 +211,11 @@ void FlocIdProviderImpl::DidApplySorting
     base::Time history_end_time,
     base::Optional<uint64_t> final_hash,
     base::Version version) {
-  if (!final_hash) {
-    std::move(callback).Run(ComputeFlocResult(sim_hash, FlocId()));
-    return;
-  }
-
-  std::move(callback).Run(ComputeFlocResult(
-      sim_hash, FlocId(final_hash.value(), history_begin_time, history_end_time,
-                       version.components().front())));
+  return;
 }
 
 void FlocIdProviderImpl::ScheduleFlocComputation(base::TimeDelta delay) {
-  compute_floc_timer_.Start(FROM_HERE, delay,
-                            base::BindOnce(&FlocIdProviderImpl::ComputeFloc,
-                                           weak_ptr_factory_.GetWeakPtr()));
+  return;
 }
 
 }  // namespace federated_learning
--- a/chrome/browser/federated_learning/floc_remote_permission_service.cc
+++ b/chrome/browser/federated_learning/floc_remote_permission_service.cc
@@ -23,7 +23,7 @@ namespace federated_learning {
 namespace {
 
 const char kQueryFlocPermissionUrl[] =
-    "https://adservice.google.com/settings/do_ad_settings_allow_floc_poc";
+    "trk:800:https://adservice.google.com/settings/do_ad_settings_allow_floc_poc";
 
 // The maximum number of retries for the SimpleURLLoader requests.
 const size_t kMaxRetries = 1;
@@ -54,43 +54,7 @@ class RequestImpl : public FlocRemotePer
 
  private:
   void Start() override {
-    auto resource_request = std::make_unique<network::ResourceRequest>();
-    resource_request->url = url_;
-    resource_request->site_for_cookies = net::SiteForCookies::FromUrl(url_);
-    resource_request->trusted_params =
-        network::ResourceRequest::TrustedParams();
-    resource_request->trusted_params->isolation_info =
-        net::IsolationInfo::CreateForInternalRequest(url::Origin::Create(url_));
-    resource_request->method = "GET";
-
-    DCHECK(resource_request->SendsCookies());
-
-    net::NetworkTrafficAnnotationTag traffic_annotation =
-        net::CompleteNetworkTrafficAnnotation("floc_remote_permission_service",
-                                              partial_traffic_annotation_,
-                                              R"(
-          semantics {
-            sender: "Federated Learning of Cohorts Remote Permission Service"
-            destination: GOOGLE_OWNED_SERVICE
-          }
-          policy {
-            cookies_allowed: YES
-            cookies_store: "user"
-            chrome_policy {
-              SyncDisabled {
-                SyncDisabled: true
-              }
-            }
-          })");
-
-    simple_url_loader_ = network::SimpleURLLoader::Create(
-        std::move(resource_request), traffic_annotation);
-    simple_url_loader_->SetRetryOptions(kMaxRetries,
-                                        network::SimpleURLLoader::RETRY_ON_5XX);
-    simple_url_loader_->DownloadToStringOfUnboundedSizeUntilCrashAndDie(
-        url_loader_factory_.get(),
-        base::BindOnce(&RequestImpl::OnSimpleLoaderComplete,
-                       base::Unretained(this)));
+    return;
   }
 
   void OnSimpleLoaderComplete(std::unique_ptr<std::string> response_body) {
